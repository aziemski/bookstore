// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Book defines model for Book.
type Book struct {
	// Author Author of the book
	Author string `json:"author"`

	// Category Category of the book
	Category string `json:"category"`

	// Description Description of the book
	Description string `json:"description"`

	// Featured Indicates whether the book is featured or not
	Featured bool `json:"featured"`

	// Id Unique identifier for the book
	Id *string `json:"id,omitempty"`

	// ImageLink Link to the image of the book cover
	ImageLink string `json:"image_link"`

	// Summary Summary of the book
	Summary string `json:"summary"`

	// Title Title of the book
	Title string `json:"title"`
}

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code string `json:"code"`

	// Msg Description of the error
	Msg string `json:"msg"`
}

// SearchResponse defines model for SearchResponse.
type SearchResponse struct {
	Results *[]SearchResult `json:"results,omitempty"`

	// TotalResults Total number of results
	TotalResults *int `json:"total_results,omitempty"`
}

// SearchResult defines model for SearchResult.
type SearchResult struct {
	// Author Author of the book
	Author *string `json:"author,omitempty"`

	// Id Unique identifier for the book
	Id string `json:"id"`

	// ImageLink Link to the image of the book cover
	ImageLink string `json:"image_link"`

	// Summary Summary of the book
	Summary string `json:"summary"`

	// Title Title of the book
	Title string `json:"title"`
}

// GetBooksSearchParams defines parameters for GetBooksSearch.
type GetBooksSearchParams struct {
	// Q Search query term
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostBooksJSONRequestBody defines body for PostBooks for application/json ContentType.
type PostBooksJSONRequestBody = Book

// PutBooksIdJSONRequestBody defines body for PutBooksId for application/json ContentType.
type PutBooksIdJSONRequestBody = Book

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all books
	// (GET /books)
	GetBooks(ctx echo.Context) error
	// Create a new book
	// (POST /books)
	PostBooks(ctx echo.Context) error
	// Search books by title, author, or other attributes
	// (GET /books/search)
	GetBooksSearch(ctx echo.Context, params GetBooksSearchParams) error
	// Delete a book by ID
	// (DELETE /books/{id})
	DeleteBooksId(ctx echo.Context, id string) error
	// Get a book by ID
	// (GET /books/{id})
	GetBooksId(ctx echo.Context, id string) error
	// Update a book by ID
	// (PUT /books/{id})
	PutBooksId(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetBooks converts echo context to params.
func (w *ServerInterfaceWrapper) GetBooks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBooks(ctx)
	return err
}

// PostBooks converts echo context to params.
func (w *ServerInterfaceWrapper) PostBooks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostBooks(ctx)
	return err
}

// GetBooksSearch converts echo context to params.
func (w *ServerInterfaceWrapper) GetBooksSearch(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBooksSearchParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBooksSearch(ctx, params)
	return err
}

// DeleteBooksId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBooksId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteBooksId(ctx, id)
	return err
}

// GetBooksId converts echo context to params.
func (w *ServerInterfaceWrapper) GetBooksId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBooksId(ctx, id)
	return err
}

// PutBooksId converts echo context to params.
func (w *ServerInterfaceWrapper) PutBooksId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutBooksId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/books", wrapper.GetBooks)
	router.POST(baseURL+"/books", wrapper.PostBooks)
	router.GET(baseURL+"/books/search", wrapper.GetBooksSearch)
	router.DELETE(baseURL+"/books/:id", wrapper.DeleteBooksId)
	router.GET(baseURL+"/books/:id", wrapper.GetBooksId)
	router.PUT(baseURL+"/books/:id", wrapper.PutBooksId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTY/bNhD9KwTbo7DytjnptskWhYGmWDTNKVgEtDSymBVJ7XC4qbHwfy84tGXrw/YG",
	"TZNLTrb48TgzfO8Nn2XpTOcsWPKyeJa+bMAo/vvauYf426HrAEkDj6pAjcP4rwJfou5IOysLecPjwtWC",
	"GhCruDeTtOlAFtITaruW20yWimDtcDPd/2Y3cwlhsGsMcnv4uoRTg6KAUE1BlrbSMU4vPjdADWCPI7QX",
	"+33CobCODtAr51pQNmLrGdT3Vj8GELoCS7rWgKJ2eDZCbdQaPrbaPkzR/tD2QZDj/bzuOF1RuifAOUgf",
	"jFFz1X+XJi4VjTS1MN39dxw+v3ebSYTHoLniH3ZA2Z5NR8QY5D287qNLO6Ry3x/lVp+gpBjmb4iJokPq",
	"lq6aCZ4XC56bydj49YtoBnzkpbR3p0TQubjfgcKy+Qt856yHaQIIPrRJp5rA8J+fEWpZyJ/yg47znYjz",
	"Hi+0jL87UCGqDX87Uu3HI9TRtcZpYYNZAQt7v7AH0pZgDchpnk4mHv6VbeSHwC4xTUeN7FU2UNRp4UQM",
	"bWs3cyt3S66mUVattV1zDL4/oeBe4cXbOA0GLImbu6XM5BOgTwjXV4urRczQdWBVp2Uhf+WhTHaKGuZE",
	"nlCLZ7kGpkwkjIohLCtZyN+BXu+OxZ1EePEvi0VStyWwvE91XRstXDubf/KpUSRNvFg63PwmktmOG5C8",
	"Ea32FK8mBb89JkEMWai23c9lsnN+JrM7549SewwQP6vNF2V1OZkhRQgDbCeVvP4fzhxRuQFRIiiCKjF5",
	"WLE3PCWUsPD5MJ+YkXu2lIsESc7DzEJlgAC9LD5MFMmrxGMA3AgCNFEocYJHZCatMvHqH6Nm+pQnqhvD",
	"/tnbJfMseoh/0N0JcFfXHmhwQgW1YstcZNJoq00w/H/queOj36p/4uojx+5DQKCA9kQQrTb6RAzXMYgE",
	"Gz+OQ7qeCen+P0rzRc0sNccZaiUTMorKJnpU9MrEGFGiJkCtRmTbUYDJJVYbwW6WidSbsvjCc/z+U0So",
	"V4HAH7PxWVfbVKwWCKZ0vOVxDmpZTU3r1dRm41qR4CrhQ1mC93VoW27Wr9KOr1LL9EA6UcL4rBW1C7Ya",
	"lSslJFTqgauNWN7GwM5qcS7zxTcxmZ2R9jbTV/ALMmb/HqV71lSWt4N3AjnRAdYOjejLI1yvw9j5DjLU",
	"lRwb9Dnnuc9kF+aaSRhU/nt2k29z0aGr1Mw1f0ehvOeIRszhJYBPe+IEbGUhG6LOF3n+3DhPkQjbXHU6",
	"f7qOryeFWq3aVM39/MCepbKbeMaVs622bIr3238DAAD//wYKWRLTDwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
